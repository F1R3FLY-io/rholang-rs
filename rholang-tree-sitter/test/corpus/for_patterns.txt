=================
Patterns in a for
=================

new people, stdout(`rho:io:stdout`) in {
    people!(@"name"!("Joe") | @"age"!(20) | @"eyes"!("blue") | @"seq"!(0)) |
    people!(@"name"!("Julie") | @"age"!(30) | @"eyes"!("brown") | @"seq"!(0)) |
    people!(@"name"!("Jane") | @"age"!(40) | @"eyes"!("green") | @"seq"!(0)) |
    people!(@"name"!("Jack") | @"age"!(50) | @"eyes"!("grey") | @"seq"!(0))|
    for (@{@"seq"!(0) | {row /\ {@"name"!(name) | @"age"!(age) | _}}} <= people) {
      if (age > 35) {
        stdout!([name, age])
      } |
      people!(row | @"seq"!(1))
    }
}

---

(source_file
  (new
    decls: (name_decls
      (name_decl
        (var))
      (name_decl
        (var)
        uri: (uri_literal)))
    proc: (block
      (par
        (par
          (par
            (par
              (send
                channel: (var)
                send_type: (send_single)
                inputs: (inputs
                  (par
                    (par
                      (par
                        (send
                          channel: (quote
                            (string_literal))
                          send_type: (send_single)
                          inputs: (inputs
                            (string_literal)))
                        (send
                          channel: (quote
                            (string_literal))
                          send_type: (send_single)
                          inputs: (inputs
                            (long_literal))))
                      (send
                        channel: (quote
                          (string_literal))
                        send_type: (send_single)
                        inputs: (inputs
                          (string_literal))))
                    (send
                      channel: (quote
                        (string_literal))
                      send_type: (send_single)
                      inputs: (inputs
                        (long_literal))))))
              (send
                channel: (var)
                send_type: (send_single)
                inputs: (inputs
                  (par
                    (par
                      (par
                        (send
                          channel: (quote
                            (string_literal))
                          send_type: (send_single)
                          inputs: (inputs
                            (string_literal)))
                        (send
                          channel: (quote
                            (string_literal))
                          send_type: (send_single)
                          inputs: (inputs
                            (long_literal))))
                      (send
                        channel: (quote
                          (string_literal))
                        send_type: (send_single)
                        inputs: (inputs
                          (string_literal))))
                    (send
                      channel: (quote
                        (string_literal))
                      send_type: (send_single)
                      inputs: (inputs
                        (long_literal)))))))
            (send
              channel: (var)
              send_type: (send_single)
              inputs: (inputs
                (par
                  (par
                    (par
                      (send
                        channel: (quote
                          (string_literal))
                        send_type: (send_single)
                        inputs: (inputs
                          (string_literal)))
                      (send
                        channel: (quote
                          (string_literal))
                        send_type: (send_single)
                        inputs: (inputs
                          (long_literal))))
                    (send
                      channel: (quote
                        (string_literal))
                      send_type: (send_single)
                      inputs: (inputs
                        (string_literal))))
                  (send
                    channel: (quote
                      (string_literal))
                    send_type: (send_single)
                    inputs: (inputs
                      (long_literal)))))))
          (send
            channel: (var)
            send_type: (send_single)
            inputs: (inputs
              (par
                (par
                  (par
                    (send
                      channel: (quote
                        (string_literal))
                      send_type: (send_single)
                      inputs: (inputs
                        (string_literal)))
                    (send
                      channel: (quote
                        (string_literal))
                      send_type: (send_single)
                      inputs: (inputs
                        (long_literal))))
                  (send
                    channel: (quote
                      (string_literal))
                    send_type: (send_single)
                    inputs: (inputs
                      (string_literal))))
                (send
                  channel: (quote
                    (string_literal))
                  send_type: (send_single)
                  inputs: (inputs
                    (long_literal)))))))
        (input
          receipts: (receipts
            (receipt
              (repeated_bind
                names: (names
                  (quote
                    (block
                      (par
                        (send
                          channel: (quote
                            (string_literal))
                          send_type: (send_single)
                          inputs: (inputs
                            (long_literal)))
                        (block
                          (conjunction
                            (var)
                            (block
                              (par
                                (par
                                  (send
                                    channel: (quote
                                      (string_literal))
                                    send_type: (send_single)
                                    inputs: (inputs
                                      (var)))
                                  (send
                                    channel: (quote
                                      (string_literal))
                                    send_type: (send_single)
                                    inputs: (inputs
                                      (var))))
                                (wildcard)))))))))
                input: (var))))
          proc: (block
            (par
              (ifElse
                condition: (gt
                  (var)
                  (long_literal))
                consequence: (block
                  (send
                    channel: (var)
                    send_type: (send_single)
                    inputs: (inputs
                      (collection
                        (list
                          (var)
                          (var)))))))
              (send
                channel: (var)
                send_type: (send_single)
                inputs: (inputs
                  (par
                    (var)
                    (send
                      channel: (quote
                        (string_literal))
                      send_type: (send_single)
                      inputs: (inputs
                        (long_literal)))))))))))))
